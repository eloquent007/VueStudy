
###################################################################################
Clone 명령
###################################################################################
모바일은 PC랑 소스가 중복으로 될수 있기 때문에 별도의 폴더를 만들어서 clone해줌.
PS C:\dArtagnan\kyowon\basecampM> git clone -b kwop_dev_mobile http://dcsf-dev08.i-on.net/dts/kyowon-basecamp.git

--스테이징PC clone
git clone -b kwop_sta_phase2 http://dcsf-dev08.i-on.net/dts/kyowon-front-builder.git




git clone -b features/kwop_npay http://dcsf-dev08.i-on.net/dts/kyowon-backend-core.git



# 소스 커밋 시 체리픽 오류 해셜 방법
    * 터미널 혹은 커맨드에서 git 명령어로 리셋한다.
        - ex) $ git reset --hard origin/kwop_prd_pc(리모트명/복원할 git 브랜치명)

>git reset --hard origin/kwop_prd_pc



-------------------------------------------------------------------------------------

커밋방법
1. Project 최상단 > 마우스오른쪽 > Git>Repository > Push
2. Git Branches 에서 stg로 변경 > Update
3. Git Log에서 Branch:origin/.. dev선택 후 dev에서 commit되어 push된 로그를 확인
4. 해당 항목에서 마우스 오른족 Cherry-Pick 해서 stg에 똑같이 동기화를 한다.
5. Push 하여 마무리.


커밋방법 변경 (2020.10.27) 
1. Branches  : kwop_dev_mobile 에서 작업.
2. 작업한 내역 commit 
3. Branches  : kwop_sta_mobile 로 변경
4. 메뉴 VCS > Git > Merge Changes  로 dev소스의 commit 된 항목을 sta에  merge 한다.
5. push로 stg에 소스 적용 완료.
6. 젠킨스 배포


커밋방법 변경 (2020.11.10) 
1. Branches  : 운영소스를 기반으로 개인 Branch 생성.
2. 작업한 내역 commit 
3. Branches  : kwop_sta_mobile 로 변경
4. Cherry-Pick 로 소스 적용하고 commit 
5. kwop_prd_phase2로 Checkout 
4. 메뉴 VCS > Git > Merge Changes > Merge할 Brance선택(개인작업한 Brance선택 )
5. push로 stg에 소스 적용 완료.
6. 젠킨스 배포




------------------------------------------------------------------------------------
2020.11.10 
GIT 오류
Repository URL : http://dts-jenkins:dts-jenkins@dcsf-dev08.i-on.net/dts/kyowon-basecamp.git
Failed to connect to repository : Command "git ls-remote -h http://dts-jenkins:dts-jenkins@dcsf-dev08.i-on.net/dts/kyowon-basecamp.git HEAD" returned status code 128:
stdout:
stderr: fatal: Authentication failed for 'http://dts-jenkins:dts-jenkins@dcsf-dev08.i-on.net/dts/kyowon-basecamp.git/'


git@dcsf-dev08.i-on.net:dts/kyowon-basecamp.git
http://dcsf-dev08.i-on.net/dts/kyowon-basecamp.git



------------------------------------------------------------------------------------
엘리 Git 강좌
https://www.youtube.com/watch?v=Z9dvM7qgN9s
------------------------------------------------------------------------------------
git config --list   <-- 설정파일 리스트
git config --global -e  <-- 환경설정 파일
git config --global core.editor "code"  <-- 환경설정파일 편집을 vscode로 설정하기.
git config --global -e
git config --global core.editor "code --wait" <-- 설정파일 편집중 터미널창 대기상태로 만들기(이렇게 설정해야 commit 메시지 적고 다시 커멘드로 넘어옴).
git config --global -e
git config --global  user.name "dArtagnan"
git config --global  user.email "yygcamper@gmail.com"
git config --global core.autocrlf    <-- window와 mac 저장시 캐리지리턴을 호환설정하기.(window와 mac 줄바꿈이 틀림)

cd projects
mkdir git
cd git
ls -al 

git init  <-- 깃을 사용할 폴더명시
ls   <-- 생성된 git 숨긴폴더가 만들어 진다.
open .git 
rm -rf .git  <-- git 폴더사용 안함 설정(숨김git  폴더 삭제)

git init
git status <-- branch 확인.
git config --global alias.st status  <-- status를 약자로 st로 사용으로 변경
git st 

git config --h  <-- git 설정파일 전체 보기.
(https://git-scm.com/docs/git-config  <-- Reference)

echo hello world! >a.txt <-- "hello world!" 문자열을 a.txt로 만들기.

echo hello world! >b.txt
echo hello world! >c.txt

git status  <-- untracked 된 a,b,c.txt 확인.
git add a.txt  <-- a.txt 만 tracked 로 설정.

git add *.txt <-- 확장자 txt 파일은 전부 add.
git status 

echo ellie >>a.txt  <-- a.txt 에 ellie 추가.
git status   <-- a.txt 만 수정중인걸 확인.


git rm --cached *.txt   <-- untracked 상태로 만듬.
git status   <--확인.

git add * <-- 폴더안 전체가 Staging area 로 옮겨짐.

echo *.log > .gitignore  <-- log 파일은 git에 올리지 않음설정.

git status -h <--  status 옵션 확인.
git status -s <-- status 간단하게 보기.

git diff  <-- 특별명령어 없이 diff 만 하게 되면 working Area 에 있는것만 비교한다.
------------------------------------------------------------------------------------
diff --git a/a.txt b/a.txt  <-- 기존파일의 a.txt 와 현재의 a.txt 를 비교한다. 
index 12a8798..bc31efa 100644
--- a/a.txt  <--기존 a.txt
+++ b/a.txt  <--현재 a.txt 
@@ -1 +1,2 @@
 hello world!
+ellie   < + 표시는 현재 a.txt 에 추가가 되었다를 의미.  삭제면 -로 표시된다.
------------------------------------------------------------------------------------

cat c.txt  <-- c.txt 내용 확인.
git diff --staged <-- staged 된 파일들 비교.
git diff --h   <-- diff 명령어 확인.

git commit  <-- 커밋하기 위해  메시지 입력
git log <-- 커밋된 로그 확인.

echo add >> c.txt
git status -s 

git add .
git commit -m "second commit"

git commit -am "third commit"  <-- 모든 파일을 한거번에 커밋하면서 메시지 남김.
git status -s 