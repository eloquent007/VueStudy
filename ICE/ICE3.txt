- ICE3 Custom API
ICE3에서 제공하는 node의 기본 API 기능을 확장한 Custom API를 작성할 수 있도록 제공하며, URL 패턴을 분석하여 제공합니다. 
보통 API 작성은 Custom API를 말합니다.
API URL : http://{SERVER_HOST}/{API_TYPE}/{API_CATEGORY}/{API_ID} 
SERVER HOST : ICE3-CORE의 hostname 또는 {IP}:{PORT}
API CATEGORY : ICE3 API의 Category ID
API ID : 호출할 API의 ID (apiId)
API TYPE : 서비스 대상 구분
	service : 프론트 서비스를 위한 API
	admin : 시스템 관리를 위한 API
	manager : 컨텐츠 관리를 위한 API
	external : 서버대 서버 연동을 위한 API
	internal : 내부 솔루션 연동을 위한 API
	open : 외부 제공 API


------------------------------------------------------------------------------
propertyTypes > virtual  ?

getCountExcelDownloadItem


------------------------------------------------------------------------------
Client :path: '/svc/customerApi/customerIdDuplicationCheck', 이렇게 호출.


src/main/resources/schema/core/user/customerApi.json
src/main/resources/schema/core/user/kwop/customerApi.json

default 소스가 있고. kwop 커스텀된 소스 폴더가 있다.
교원은 로딩시 kwop폴더가 있는 소스를 기본으로 보게 되어있다.

------------------------------------------------------------------------------
API DB정보 
src/main/resources/schema/profiles/kwop-sta/dataSource.json  <--SID로 연결
src/main/resources/schema/profiles/kwop-prd/dataSource.json  <-- 운영차이점은 SERVICE_NAME=COMM 으로 연동이 된다.

--------------------------------------------------------------------------------------------------------------------
C:\dArtagnan\kyowon\backendCore\kyowon-backend-core\src\main\resources\schema\kwop\displayMng\bestProduct\api.json

"method": "matching",  DB조건 and
"method": "matchingShould", DB조건 or 
"method": "fromto",  DB조건 between 



-----------------------------------------------------------------------------------------------------------------------

{{protocol}}://{{hostname}}:{{port}}/node/api/bestProductApi>bestList  확인.

{{protocol}}://{{hostname}}:{{port}}/helper/loadSchema?filePath=kwop/displayMng/bestProduct/api.json  로드스키마



-----------------------------------------------------------------------------------------------------------------------

1. API검색 : {{protocol}}://{{hostname}}:{{port}}/adm/api/read?id=bestProductApi>bestList
    : config의 id를 조회하기 위함이다.

2. API Config 확인 :{{protocol}}://{{hostname}}:{{port}}/node/apiConfig/1037642594  863216329
   : 1에서 조회한 id값으로 조회를 한다.

3. 2에서 조회한 결과에서 설정변경할 값을 key에 value로 세팅한 후 변경한다.
{{protocol}}://{{hostname}}:{{port}}/node/apiConfig/update.json
id=863216329
cacheable=false



{{protocol}}://{{hostname}}:{{port}}/node/api/productApi>list  확인.
{{protocol}}://{{hostname}}:{{port}}/helper/loadSchema?filePath=kwop/productMng/product/api.json  로드스키마


--------------------------------------------------------------------------------------------------------------------
API 조회 방법
Q : 판매종료상품 말고 전부 화면에 보여주기로 수정.


1: {{protocol}}://{{hostname}}:{{port}}/node/api?id_matching=productApi>list
    {{protocol}}://{{hostname}}:{{port}}/adm/api/read?id=productApi>list <--ADMIN

	1-1. postman에서 api 를 조회.Basic > API >
	1-2. 조건변경이므로 config 에서 "type": "query" 이기때문에. 
            "config": [
                {
                    "id": "338046087",
                    "targetId": {
                        "value": "list",
                        "label": "Product List",
                        "refId": "api::productApi>list"
                    },
                    "configId": "root",
                    "type": {
                        "value": "query",
                        "label": "Query"
                    },

	1-3.  saleStatus가 판매상태 이므로 해당값 확인.
		(src/main/resources/schema/kwop/productMng/product/productSchema.json) <-- 해당컬럼 스키마 정보를 알수 있다.
         
         
    1-4. src/main/resources/schema/kwop/productMng/product/api.json         
          {
            "method": "matching",
            "field": "saleStatus",
            "value": "selling"
          },


        //원하는값은 바로 아래. 판매상태(saleStatus)가 판매종료(endSelling)가 아닌(notMatching) 상품으로 조회하기.
          {  
            "method": "notMatching",
            "field": "saleStatus",
            "value": "endSelling"
          },

2 : {{protocol}}://{{hostname}}:{{port}}/node/apiConfig?id_matching=338046087
	2-1. config를 수정해야 하기에 해당 id값으로 조회. 
            "config": [   <--1의 조회 결과`	
                {
                    "id": "338046087",
                    "targetId": {
                        "value": "list",
                        "label": "Product List",
                        "refId": "api::productApi>list"
                    },
3 : 2의 결과값에서 saleStatus 를 찾아서 해당 ID값을 확인함.
                {
                    "id": "160541883",
                    "configId": {
                        "value": "338046087",
                        "label": "root",
                        "refId": "338046087"
                    },
                    "method": {
                        "value": "notMatching",
                        "label": "Not Matching"
                    },
                    "field": "saleStatus",
                    "value": "endSelling",
                    "useCacheKey": true,
                    "label": "saleStatus"
                }


4: {{protocol}}://{{hostname}}:{{port}}/node/apiQuery?id_matching=160541883
	4-1. 3의 값으로 조회.
	4-2. 해당 item 의 조건값 확인.


  {{protocol}}://{{hostname}}:{{port}}/node/apiQuery?id_matching=30945177  <--운영값
   

5: 4의 결과 item 에서 변경해야될 id값 value값등 확인.
	5-1. {{protocol}}://{{hostname}}:{{port}}/node/apiQuery/update.json   post 방식으로
	5-2. Body에 id= 160541883, value= endSelling 으로 업데이트 함.


6.  2의 결과에서 한컬럼정의가 여러개가 되어 있다면 중복된 값을 삭제 처리 가능하다.
	6-1. {{protocol}}://{{hostname}}:{{port}}/node/apiQuery/delete.json   <--post 방식으로
	6-2. Body에 id값  id = 1486285166 를 넣어 삭제 처리.


--------------------------------------------------------------------------------------

{{protocol}}://{{hostname}}:{{port}}/helper/loadSchema?filePath=kwop/productMng/product/api.json
{{protocol}}://{{hostname}}:{{port}}/helper/reloadSchema?filePath=/home/m85dev/apps/jsonDatas/api.json


1. {{protocol}}://{{hostname}}:{{port}}/helper/reloadSchema?filePath=kwop/productMng/packageSubProduct/packageSubProductSchema.json
2. {{protocol}}://{{hostname}}:{{port}}/node/packageSubProduct

{{protocol}}://{{hostname}}:{{port}}/helper/loadSchema?filePath=core/user/kwop/customerApi.json


packageSubProduct

packageSubProductApi
 600579619

discountRate    1505498650   config 1371547589  1355221847
consumerPrice  485128916


1930862807


{{protocol}}://{{hostname}}:{{port}}/node/api?id_matching=customerApi>customerDuplicatedCompareCI

{{protocol}}://{{hostname}}:{{port}}/node/api?id_matching=productApi>packageRead
{{protocol}}://{{hostname}}:{{port}}/adm/api/read?id=productApi>packageRead



{{protocol}}://{{hostname}}:{{port}}/node/apiConfig?id_matching=487735117


1: {{protocol}}://{{hostname}}:{{port}}/node/api?id_matching=productApi>packageRead
	1-1. postman에서 api 를 조회.
	1-2. 조건변경이므로 config 에서 "type": "query" 이기때문에. 
	1-3.  saleStatus가 판매상태 이므로 해당값 확인.
		(src/main/resources/schema/kwop/productMng/product/productSchema.json) <-- 해당컬럼 스키마 정보를 알수 있다.
          {
            "method": "matching",
            "field": "saleStatus",
            "value": "selling"
          },
2 : {{protocol}}://{{hostname}}:{{port}}/node/apiConfig?id_matching=338046087
	2-1. config를 수정해야 하기에 해당 id값으로 조회. 
            "config": [   <--1의 조회 결과`	
                {
                    "id": "338046087",
                    "targetId": {
                        "value": "list",
                        "label": "Product List",
                        "refId": "api::productApi>list"
                    },
3 : 2의 결과값에서 saleStatus 를 찾아서 해당 ID값을 확인함.

4: {{protocol}}://{{hostname}}:{{port}}/node/apiQuery?id_matching=160541883
	4-1. 3의 값으로 조회.
	4-2. 해당 item 의 조건값 확인.

5: 4의 결과 item 에서 변경해야될 id값 value값등 확인.
	5-1. {{protocol}}://{{hostname}}:{{port}}/node/apiQuery/update.json   post 방식으로
	5-2. Body에 id= 160541883, value= endSelling 으로 업데이트 함.


6.  2의 결과에서 한컬럼정의가 여러개가 되어 있다면 중복된 값을 삭제 처리 가능하다.
	6-1. {{protocol}}://{{hostname}}:{{port}}/node/apiQuery/delete.json   <--post 방식으로
	6-2. Body에 id값  id = 1486285166 를 넣어 삭제 처리.
--------------------------------------------------------------------------------------


node 조회
{{protocol}}://{{hostname}}:{{port}}/node/api?id_matching=productApi>list
{{protocol}}://{{hostname}}:{{port}}/node/api?id_matching=customerApi>customerIdDuplicationCheck
{{protocol}}://{{hostname}}:{{port}}/node/api?id_matching=customerApi>customerCIDuplicationCheck


loadSchema (json 파일 수정시 무조건 해줘야 함.)
{{protocol}}://{{hostname}}:{{port}}/helper/loadSchema?filePath=core/user/kwop/customerApi.json
{{protocol}}://{{hostname}}:{{port}}/helper/loadSchema?filePath=core/user/kwop/customerSchema.json

reloadSchema (지우고 재생성)
{{protocol}}://{{hostname}}:{{port}}/helper/reloadSchema?filePath=core/user/kwop/customerApi.json

reloadSchema 를 했는데도 수정이 되지 않을 경우는 
위에 API 조회 방법 처럼 수행 후 update 해야 됨.

---------------------------------------------------------------------------------------------------

src/main/resources/schema/core/user/kwop/customerApi.json


    "parameters": [
    ],
    "config": [
      {
        "configId": "root",
        "tid": "customer",
        "type": "query",
        "allowParams": false,
        "orderNo": 1,
        "query": [
          {
            "method": "matching",
            "field": "customerNo",
            "value": "{{:default(session.customer.customerNo,'xxx')}}"
          },

parameters 일반적으론 사용자로부터 get, post로 정보를 받는 값임.
query 는 그 받은 값으로 조건을 만들기 위해 사용 and or 등..

여기서는 파미니터값을 받지 않고 세션 값을 사용함.
---------------------------------------------------------------------------------------------------

customer 테이블에서 customerNo 로 조회하기 ( _matching(원더바매칭)이 db의 = 와 같은 뜻임)
1. {{protocol}}://{{hostname}}:{{port}}/node/customer/list.json?customerNo_matching=110438
    {{protocol}}://{{hostname}}:{{port}}/node/customer/list.json?customerId_matching=eloquent007


2. update (POST처리)
    {{protocol}}://{{hostname}}:{{port}}/node/customer/update.json
    1에서 조회해서 나온 id 값이 키값이 됨.
    id = "110438"
    authorizationCI ="fasdfasdf"  <-- PropertyType value 

ICE	            DB
NodeType	    Table
PropertyType	Column
Node	        Record
---------------------------------------------------------------------------------------------------
customerSchema.json

        "event": "findId",
        "noneExecute": true,
        "name": "회원 아이디 찾기",
        "eventActions": [
          {
            "action": "findId",
            "actionName": "회원 아이디 찾기",
            "actionType": "service",
            "actionBody": "kwopCustomerService.findId",
            "orderNo": 1
          }
        ],
        "eventListeners": [
          {
            "_event": "delete",
            "tid": "emailConfig",
            "actionType": "service",
            "actionBody": "kwopCustomerService.sendMailAfterEvent",
            "executeType": "single",
            "name": "이벤트 완료 후 메일 보내기"
          }
        ]

1.기본 이벤트 eventActions
2. 1 수행후 추가 이벤트 수행.
---------------------------------------------------------------------------------------------------
public void findId(ExecuteContext context) {
 ExecuteContext로 데이터를 받으면 context.setResult(result);
 setResult로 값을 돌려 주면 된다.

 리턴값이 없고 void를 사용한 이유임.

 ---------------------------------------------------------------------------------------------------

