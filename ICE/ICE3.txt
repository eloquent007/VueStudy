- ICE3 Custom API
ICE3에서 제공하는 node의 기본 API 기능을 확장한 Custom API를 작성할 수 있도록 제공하며, URL 패턴을 분석하여 제공합니다. 
보통 API 작성은 Custom API를 말합니다.
API URL : http://{SERVER_HOST}/{API_TYPE}/{API_CATEGORY}/{API_ID} 
SERVER HOST : ICE3-CORE의 hostname 또는 {IP}:{PORT}
API CATEGORY : ICE3 API의 Category ID
API ID : 호출할 API의 ID (apiId)
API TYPE : 서비스 대상 구분
	service : 프론트 서비스를 위한 API
	admin : 시스템 관리를 위한 API
	manager : 컨텐츠 관리를 위한 API
	external : 서버대 서버 연동을 위한 API
	internal : 내부 솔루션 연동을 위한 API
	open : 외부 제공 API



----------------------------------------------------------
요렇게 나오면 디버그 정상 상태 
2020-10-06 09:15:13.316 INFO  244947 - [restartedMain] o.s.web.servlet.DispatcherServlet : Completed initialization in 14 ms 
2020-10-06 09:15:13.325 INFO  244956 - [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 
2020-10-06 09:15:13.332 INFO  244963 - [restartedMain] net.ion.ice.BackendCoreApplication : Started BackendCoreApplication in 244.672 seconds (JVM running for 246.212) 

해당 오류는 무시해도 된다.
org.springframework.boot.devtools.restart.SilentExitExceptionHandler$SilentExitException
	at org.springframework.boot.devtools.restart.SilentExitExceptionHandler.exitCurrentThread(SilentExitExceptionHandler.java:90)
	at org.springframework.boot.devtools.restart.Restarter.immediateRestart(Restarter.java:180)
	at org.springframework.boot.devtools.restart.Restarter.initialize(Restarter.java:164)
	at org.springframework.boot.devtools.restart.Restarter.initialize(Restarter.java:554)


----------------------------------------------------------
propertyTypes > virtual  ?

getCountExcelDownloadItem



----------------------------------------------------------
API DB정보 
src/main/resources/schema/profiles/kwop-sta/dataSource.json  <--SID로 연결
src/main/resources/schema/profiles/kwop-prd/dataSource.json  <-- 운영차이점은 SERVICE_NAME=COMM 으로 연동이 된다.

--------------------------------------------------------------------------------------------------------------------
API 조회 방법
Q : 판매종료상품 말고 전부 화면에 보여주기로 수정.


1: {{protocol}}://{{hostname}}:{{port}}/node/api?id_matching=productApi>list
	1-1. postman에서 api 를 조회.
	1-2. 조건변경이므로 config 에서 "type": "query" 이기때문에. 
	1-3.  saleStatus가 판매상태 이므로 해당값 확인.
		(src/main/resources/schema/kwop/productMng/product/productSchema.json) <-- 해당컬럼 스키마 정보를 알수 있다.
          {
            "method": "matching",
            "field": "saleStatus",
            "value": "selling"
          },
2 : {{protocol}}://{{hostname}}:{{port}}/node/apiConfig?id_matching=338046087
	2-1. config를 수정해야 하기에 해당 id값으로 조회. 
            "config": [   <--1의 조회 결과`	
                {
                    "id": "338046087",
                    "targetId": {
                        "value": "list",
                        "label": "Product List",
                        "refId": "api::productApi>list"
                    },
3 : 2의 결과값에서 saleStatus 를 찾아서 해당 ID값을 확인함.

4: {{protocol}}://{{hostname}}:{{port}}/node/apiQuery?id_matching=160541883
	4-1. 3의 값으로 조회.
	4-2. 해당 item 의 조건값 확인.

5: 4의 결과 item 에서 변경해야될 id값 value값등 확인.
	5-1. {{protocol}}://{{hostname}}:{{port}}/node/apiQuery/update.json   post 방식으로
	5-2. Body에 id= 160541883, value= endSelling 으로 업데이트 함.


6.  2의 결과에서 한컬럼정의가 여러개가 되어 있다면 중복된 값을 삭제 처리 가능하다.
	6-1. {{protocol}}://{{hostname}}:{{port}}/node/apiQuery/delete.json   <--post 방식으로
	6-2. Body에 id값  id = 1486285166 를 넣어 삭제 처리.

-----------------------------------------------------------------------------

orderApplicableCoupons() <--해당 method 
src/main/java/net/ion/ice/mapper/CouponMapper.java 
src/main/resources/schema/kwop/promotionMng/coupon/couponTypeSchema.json
src/main/resources/schema/kwop/promotionMng/coupon/couponApi.json
src/main/resources/mybatis/coupon.xml


아래 오류가 발생하는 이유는 Mybatis를 사용 할려면 Mapper 에 interface 등록이 되어야 하나 그렇지 않을경우 발생함.




### Error querying database. Cause: java.sql.SQLException: Connection is null.
### The error may exist in file [/home/m85dev/apps/iceCore/war/WEB-INF/classes/mybatis/coupon.xml]
### The error may involve net.ion.ice.mapper.CouponMapper.downloadable
### The error occurred while executing a query
### SQL: select f.* from ( select ROWNUM r, t.* from ( select ct.* from ( select a.*, regexp_substr(a.CATEGORYID, '[^,]+', 1, 1) categoryA, regexp_substr(a.CATEGORYID, '[^,]+', 1, 2) categoryB, regexp_substr(a.CATEGORYID, '[^,]+', 1, 3) categoryC from COUPONTYPE a where 1 = 1 and USEYN = 1 and ISSUETYPE = 'download' and sysdate between ISSUESTARTDATE and ISSUEENDDATE and sysdate between USAGESTARTDATE and USAGEENDDATE ) ct where 1 = 1 and (select count(*) from COUPON where COUPONTYPENO = ct.COUPONTYPENO) < ct.issueCount and (USETARGETTYPE = 'all' or (USETARGETTYPE = 'category' and ((categoryA is not null and categoryA = ?) or categoryA is null) and ((categoryB is not null and categoryB = ?) or categoryB is null) and ((categoryC is not null and categoryC = ?) or categoryC is null) ) or (USETARGETTYPE = 'brand' and BRANDID like '%' || ? || '%') or (USETARGETTYPE = 'product' and COUPONTYPENO in (select COUPONTYPENO from COUPONTYPEPRODUCTMAP where COUPONTYPENO = ct.COUPONTYPENO and PRODUCTID = ?)) ) order by USAGEENDDATE desc, COUPONTYPENO desc ) t ) f
### Cause: java.sql.SQLException: Connection is null.
; uncategorized SQLException; SQL state [null]; error code [0]; Connection is null.; nested exception is java.sql.SQLException: Connection is null.
org.springframework.jdbc.UncategorizedSQLException:
### Error querying database. Cause: java.sql.SQLException: Connection is null.
### The error may exist in file [/home/m85dev/apps/iceCore/war/WEB-INF/classes/mybatis/coupon.xml]
### The error may involve net.ion.ice.mapper.CouponMapper.downloadable
### The error occurred while executing a query
### SQL: select f.* from ( select ROWNUM r, t.* from ( select ct.* from ( select a.*, regexp_substr(a.CATEGORYID, '[^,]+', 1, 1) categoryA, regexp_substr(a.CATEGORYID, '[^,]+', 1, 2) categoryB, regexp_substr(a.CATEGORYID, '[^,]+', 1, 3) categoryC from COUPONTYPE a where 1 = 1 and USEYN = 1 and ISSUETYPE = 'download' and sysdate between ISSUESTARTDATE and ISSUEENDDATE and sysdate between USAGESTARTDATE and USAGEENDDATE ) ct where 1 = 1 and (select count(*) from COUPON where COUPONTYPENO = ct.COUPONTYPENO) < ct.issueCount and (USETARGETTYPE = 'all' or (USETARGETTYPE = 'category' and ((categoryA is not null and categoryA = ?) or categoryA is null) and ((categoryB is not null and categoryB = ?) or categoryB is null) and ((categoryC is not null and categoryC = ?) or categoryC is null) ) or (USETARGETTYPE = 'brand' and BRANDID like '%' || ? || '%') or (USETARGETTYPE = 'product' and COUPONTYPENO in (select COUPONTYPENO from COUPONTYPEPRODUCTMAP where COUPONTYPENO = ct.COUPONTYPENO and PRODUCTID = ?)) ) order by USAGEENDDATE desc, COUPONTYPENO desc ) t ) f
### Cause: java.sql.SQLException: Connection is null.
; uncategorized SQLException; SQL state [null]; error code [0]; Connection is null.; nested exception is java.sql.SQLException: Connection is null.
            at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:89)
            at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
            at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
            at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
            at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
            at com.sun.proxy.$Proxy164.selectList(Unknown Source)
            at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)


--------------------------------------------------------------------------------------

{{protocol}}://{{hostname}}:{{port}}/helper/loadSchema?filePath=kwop/productMng/product/api.json
{{protocol}}://{{hostname}}:{{port}}/helper/reloadSchema?filePath=/home/m85dev/apps/jsonDatas/api.json


1. {{protocol}}://{{hostname}}:{{port}}/helper/reloadSchema?filePath=kwop/productMng/packageSubProduct/packageSubProductSchema.json
2. {{protocol}}://{{hostname}}:{{port}}/node/packageSubProduct




packageSubProduct

packageSubProductApi
 600579619

discountRate    1505498650   config 1371547589  1355221847
consumerPrice  485128916


1930862807


{{protocol}}://{{hostname}}:{{port}}/node/api?id_matching=productApi>packageRead
{{protocol}}://{{hostname}}:{{port}}/adm/api/read?id=productApi>packageRead



{{protocol}}://{{hostname}}:{{port}}/node/apiConfig?id_matching=487735117


1: {{protocol}}://{{hostname}}:{{port}}/node/api?id_matching=productApi>packageRead
	1-1. postman에서 api 를 조회.
	1-2. 조건변경이므로 config 에서 "type": "query" 이기때문에. 
	1-3.  saleStatus가 판매상태 이므로 해당값 확인.
		(src/main/resources/schema/kwop/productMng/product/productSchema.json) <-- 해당컬럼 스키마 정보를 알수 있다.
          {
            "method": "matching",
            "field": "saleStatus",
            "value": "selling"
          },
2 : {{protocol}}://{{hostname}}:{{port}}/node/apiConfig?id_matching=338046087
	2-1. config를 수정해야 하기에 해당 id값으로 조회. 
            "config": [   <--1의 조회 결과`	
                {
                    "id": "338046087",
                    "targetId": {
                        "value": "list",
                        "label": "Product List",
                        "refId": "api::productApi>list"
                    },
3 : 2의 결과값에서 saleStatus 를 찾아서 해당 ID값을 확인함.

4: {{protocol}}://{{hostname}}:{{port}}/node/apiQuery?id_matching=160541883
	4-1. 3의 값으로 조회.
	4-2. 해당 item 의 조건값 확인.

5: 4의 결과 item 에서 변경해야될 id값 value값등 확인.
	5-1. {{protocol}}://{{hostname}}:{{port}}/node/apiQuery/update.json   post 방식으로
	5-2. Body에 id= 160541883, value= endSelling 으로 업데이트 함.


6.  2의 결과에서 한컬럼정의가 여러개가 되어 있다면 중복된 값을 삭제 처리 가능하다.
	6-1. {{protocol}}://{{hostname}}:{{port}}/node/apiQuery/delete.json   <--post 방식으로
	6-2. Body에 id값  id = 1486285166 를 넣어 삭제 처리.
