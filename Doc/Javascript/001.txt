[JavaScript] ES6
Rest, Spread
https://blog.naver.com/jdub7138/221075419249

https://blog.naver.com/leeba37/221873144278


Object.assign
------------------------------------------------------------------------------------------------

'use strict'  <-- 엄격한 문법체크( 소스 맨상단 선언해서 사용)

VanillaJS의 개념을 언급해보려고 한다. VanillaJS는 자브스크립트의 프레임워크, 라이브러리를 사용하지 않고 순수한 자바스크립트만 사용하는 것을 말한다.

바닐라 자바스크립트로 코딩시  'use strict'  는 그래서 필수다.


developer.mozilla.org  자바스크립트의 공식사이트
--------------------------------------------------------------------------------------------------------------------
const count = 17;
const size = 17.1;

//template literals(string)     `:backtick
console.log(`value: ${count}, type:${size}`);
console.log(`value: ${count}, type:${typeof size}`);

`\`` === '`' // --> true
--------------------------------------------------------------------------------------------------------------------


hoisting : var, function declaration   [사전뜻: 끌어 올리다]

Promise.all (병렬처리)
Promise.race (먼저처리된것만 하나 가져오기)
--------------------------------------------------------------------------------------------------------------
let a = {
  k:1
}
let b = Object.assign({},a);
let c ={...a}
b와 c는 동일하게 객체를 새로 하나 만든다.
--------------------------------------------------------------------------------------------------------------
let a = {
  k: {
     g:1
  }
}
객체안에 객체는 {...a} 로 객체를 만들수가 없다.
let b = JSON.parse(JSON.stringify(a))  <--이렇게 해서 만들어야 만들어짐.
(stringify 스트링으로 풀어준 다음. parse 로 다시 object로 만들어줌.)

같은 방법으로
lodash.com
var deep = _.cloneDeep(objects);  <-- object안에 object는 이렇게.
그냥 {...a}의 object 복사는
var shallow = _.clone(objects);

---------------------------------------------------------------------------------------------
자바스크립트 리펙토링
자바스크립트 패턴과  테스트.
---------------------------------------------------------------------------------------------

펑션의 종류
https://youtu.be/e_lU39U-5bQ?list=PLowdT8pOD4eVm_xRgM_wsyUYIJkcW_EF5

1. anonymous function :  [ const printYes = function () { ] ,
2. named function,  [ const printYes = function print () { ] ,
3. Arrow function, [ const printYes =() => console.log('ss') ] ,

3-1. const add = (a,b) => a+b,  <-- 바로 return
3-2. const simpleMultiply = (a,b) => {
    //do something more
   return a*b;   <--arrow 펑션의 리턴까지 로직이 들어가게 되면 {}을 감싸고 return을 해 주어야 한다.
}

4. IIFE: Immediately Invoked Function Expression
  (function hello(){
   console.log('IIFE');
   }) ();
  function 앞에 (로 감싸고 ) 닫아주고.바로 ()게 호출하면.
함수를 만들고 바로 호출을 하게 된다.

-------------------------------------------------------------------
object
https://youtu.be/1Lbr29tzAA8?list=PLowdT8pOD4eVm_xRgM_wsyUYIJkcW_EF5

const obj1 ={};  //'object Literal' syntax
const obj2 = new Object(); //'object constructor' syntax


function makePerson(name, age) {
   return {
    name: name,    <--key와 value가 동일하다면 name 하나만 써도 된다.
    age, age,   <-- age도 age 하나만 써도 된다.
   }
}


console.log('name' in ellie)  //   ellie object에 해당key가 있는지 확인. true or false

-------------------------------------------------------------------------------------
배열
https://youtu.be/yOdAVDuHUKQ?list=PLv2d7VI9OotTVOL4QmPfvJWPJvkmv6h-2

fruits.forEach(function(fruit,index){
console.log(fruit, index);
}

1. fruits.forEach((fruit) => console.log(fruit));
2. fruits.push('딸기')  <-- 배열에 값추가
3. fruits.pop(); <--배열 마지막값 삭제
      //pop: remove an item from the end
4.unshitf : add an item to the beniggin
  fruits.unshift('가','나')  <-- 배열 시작점부터 추가함.

4-1.  shift : remov an item from the benigging
    fruits.shift()  <-- 배열 시작점 하나 삭제함.

 // note!!  shift, unshift are slower than pop, push
     shift, unshift 는 배열을 다시 써서 index를 잡기때문에 무지 느림.
     (값이 적을경우만 사용해야 함.)

4-2. splice <--시작점부터 어디까지 삭제할지 정함
     fruits.splice(1,2) <-- 1번째부터 2개 지움.
     fruits.splice(1,1,'가','나')  <--1번째부터 1개 지우고 그 자리에 가,나를 추가함.
4-3. concat
    const newFruits = fruits.concat(fruits2); <-- 배열에 배열을 추가함.

5.Searching
   console.clear() <-- 콘솔지움.
  5-1. indexOf   : fruits.indexOf('가') ; <-- '가' 가 몇번째 index인지 확인.
  5-2. includes : fruits.includes('바'); <-- '바' 란 값이 배열에 있는지 확인(true, false)
   5-3. indexOf : fruits.indexOf('바'); <--'바'란 값이 없으면 -1 을 리턴함.
   5-4. lastIndexof : indexOf 는 처음 다오는 위치가 리턴이고 이건 마지막 값이 리턴.


추가.
https://blog.naver.com/bkcaller/221340113996

-------------------------------------------------------------------------------------------------------
Default parameters(added in ES6)
function showMessge(message, from='unknown')   <-- unknown 을 기본값으로 넣어준것임.

호출: showMessage('HI'); <-- from 없이 호출시
-------------------------------------------------------------------------------------------------------




유용한 사이트:
JSON Diff checker: http://www.jsondiff.com/
서버에서 받아온값 2개를 비교할때 용이.

JSON Beautifier/editor: https://jsonbeautifier.org/
한줄로 만들어진 json 형식을 보기좋게 json 형식으로 볼수 있음.

JSON Parser: https://jsonparser.org/
JSON Validator: https://tools.learningcontainer.com/json-validator/



CSS, 자바스크립트 웹사이트에서 확인할때 유용한 사이트.
jsbin.com
jsfiddle.net
codesandbox.io


-------------------------------------------------------------------------------------------------
이벤트와 리스너
https://blog.naver.com/webv_v/221306609037

